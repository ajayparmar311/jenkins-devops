receivers:
  otlp:
    protocols:
      http:
        endpoint: 0.0.0.0:4318
      grpc:
        endpoint: 0.0.0.0:4317
  hostmetrics:
    collection_interval: 30s
    root_path: /hostfs
    scrapers:
      cpu:
        metrics:
          system.cpu.logical.count:
            enabled: true
      memory:
        metrics:
          system.memory.utilization:
            enabled: true
          system.memory.limit:
            enabled: true
      load:
        metrics:
          system.cpu.load_average.15m:
            enabled: false
          system.cpu.load_average.5m:
            enabled: false
      filesystem:
        metrics:
          system.filesystem.utilization:
            enabled: true
          system.filesystem.inodes.usage:
            enabled: false
  prometheus:
    config:
      scrape_configs:
        - job_name: 'python-app'
          scrape_interval: 15s
          metrics_path: '/metrics'
          static_configs:
            - targets: ['python-app:5000']  # Update with your host


processors:
  batch: {}
    timeout: 10s
    send_batch_size: 1000
    send_batch_max_size: 1024
  resourcedetection:
    detectors: [env, system] # Adds host metadata

  filter/drop_scrape_metrics:
    metrics:
      exclude:
        match_type: strict
        metric_names:
          - scrape_duration_seconds
          - scrape_samples_scraped
          - scrape_samples_post_metric_relabeling
          - scrape_series_added
          - python_gc_objects_collected_total
          - python_gc_objects_uncollectable_total
          - python_gc_collections_total
          - python_info
          - process_virtual_memory_bytes
          - process_resident_memory_bytes
          - process_start_time_seconds
          - process_cpu_seconds_total
          - process_open_fds
          - process_max_fds
          - python.*
          - python*


  # Add required resource attributes for GMP
  resource:
    attributes:
      # - key: service.name
      #   value: "hostmetrics-vm" # Unique identifier for your VM
      #   action: insert
      - key: gcp.resource_type
        value: "prometheus_target" # Required for GMP ingestion
        action: insert
  resource/delete_attr:
    attributes:
      - key: service.instance.id
        action: delete
  attributes/strip_all:
    actions:
      - key: .* 
        action: delete
  memory_limiter:
    check_interval: 1s
    limit_percentage: 65
    spike_limit_percentage: 20

  transform/remove_scope: 
    metric_statements:
      - context: metric
        statements:
          - set(instrumentation_scope.name, "")
          - set(instrumentation_scope.version, "")
          - set(instrumentation_scope.attributes, nil)
          - set(instrumentation_scope.dropped_attributes_count, 0)

  transform/remove_attrs:
    metric_statements:
      - context: resource
        statements:
          - delete_matching_keys(attributes, "service.name")
          - delete_matching_keys(attributes, "server.address")
          - delete_matching_keys(attributes, "service.instance.id")
          - delete_matching_keys(attributes, "server.port")
          - delete_matching_keys(attributes, "url.scheme")
          - delete_matching_keys(attributes, "gcp.resource_type")
          - delete_matching_keys(attributes, "host.name")
          - delete_matching_keys(attributes, "telemetry.sdk.language")
          - delete_matching_keys(attributes, "telemetry.sdk.version")
          - delete_matching_keys(attributes, "os.type")


exporters:
  rabbitmq:
    connection:
      endpoint: "amqp://rabbitmq:5672"
      # Optionally, specify vhost and TLS
      # vhost: "/"
      auth:
        plain:
          username: "guest"
          password: "guest"
    routing:
      exchange: ""           # default exchange
      routing_key: "otel-metrics"
    durable: true
    encoding_extension: otlp_encoding/rabbitmq

  loki:
    endpoint: "http://prometheus-grafana-loki-1:3100/loki/api/v1/push"  # Replace with your Loki URL
    default_labels_enabled:
      exporter: false
      job: true
      instance: true
      level: true
    retry_on_failure:
      enabled: true
    sending_queue:
      enabled: true
      storage: file_storage

  prometheusremotewrite:
    endpoint: "http://192.168.1.9:8428/api/v1/write"

  googlecloud:
    project: my-kube-project-429018
    user_agent: "otel-collector"
    metric:
      prefix: "custom.googleapis.com/hostmetrics"
  debug:
    verbosity: detailed

service:
  extensions: [otlp_encoding/rabbitmq]
  pipelines:
    metrics:
      receivers: [hostmetrics]
      processors: [transform/remove_scope, transform/remove_attrs,batch]
      exporters: [rabbitmq]
    metrics/custom:
      receivers: [prometheus]
      processors: [filter/drop_scrape_metrics,transform/remove_scope, transform/remove_attrs,batch]
      exporters: [rabbitmq]
    #logs:
    #  receivers: [otlp]
    #  processors: [memory_limiter,batch]
    #  exporters: [loki]

extensions:
  googleclientauth:
    audience: https://monitoring.googleapis.com/
  file_storage:
    directory: ./otel_storage
    create_directory: true
  otlp_encoding/rabbitmq:
    protocol: otlp_json 



